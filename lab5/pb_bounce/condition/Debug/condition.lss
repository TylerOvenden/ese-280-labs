
AVRASM ver. 2.2.7  E:\lab5\pb_bounce\condition\main.asm Wed Oct 14 19:18:04 2020

E:\lab5\pb_bounce\condition\main.asm(11): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m4809def.inc'
E:\lab5\pb_bounce\condition\main.asm(11): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m4809def.inc'
                                 
                                 
                                 ; condition.asm
                                 ;
                                 ; Created: 10/9/2020 2:01:59 PM
                                 ; Author : user38x
                                 ;
                                 
                                 
                                 ; Replace with your application code
                                 .list
                                 
                                 ; Replace with your application code
                                 start:
                                  ; configure I/O ports
000000 ef1f                      	ldi r17, 0xFF ;load r16 with all 1s
000001 b91c                      	out VPORTD_DIR, r17 ;PORTD - all pins configured as outputs
                                 		
000002 b91d                      		out VPORTD_OUT,r17
000003 e010                      	ldi r17, 0x00       ;load r16 with all 0s
                                 	
000004 bb10                      	out VPORTE_DIR, r17 ;PORTA - all pins configured as inputs
000005 b910                      	out VPORTA_DIR, r17 ;PORTA - all pins configured as inputs
000006 2f31                      	mov r19, r17        ;load r19 to be a counter
                                 	
                                    
                                 
                                 	
                                  main_loop:  
000007 9b92                          sbis VPORTE_IN, 2       ;checks if PORTE2 (switch button) is 1
000008 cffe                      	rjmp main_loop          ;restarts loop when switch button is 0
000009 c000                          rjmp first_one          ;calls first_one loop if PORTE2 is 1
                                 
                                   
                                     first_one: 
00000a e604                      	  ldi r16, 100;        ;sets register to 100 for delay 
00000b d015                           rcall var_delay       ;calls delay subroutine for debouncing
00000c 9b92                      	 sbis VPORTE_IN, 2     ;checks if PORTE2 (switch button) is still one 1
00000d cff9                      	 rjmp main_loop        ;if it is no longer 1, restarts main_loop 
00000e c000                      	 rjmp display          ;calls display function
                                 
                                     display:
00000f 9a91                      	sbi VPORTE_IN , 1       ;sets flip flop output to 1 
000010 9890                      	cbi VPORTE_IN , 0       ;sets clear to 0 
000011 b102                          in r16, VPORTA_IN       ;loads switch values into register
000012 9500                      	com r16                  ;complement r16
000013 b90d                          out VPORTD_OUT, r16     ;sets display to switch values
000014 c000                      	rjmp check_zero         ;calls check_zero loop
                                 
                                     check_zero: 
000015 e604                      	 ldi r16, 100;              ;sets register to 100 for delay 
000016 9992                      	 sbic VPORTE_IN, 2          ;checks if push button is released
000017 cffd                      	 rjmp check_zero            ;if push button still down restarts loop
000018 d008                      	 rcall var_delay           ;calls delay subroutine for debouncing
000019 9992                      	 sbic VPORTE_IN, 2         ;checks if push button is still released
00001a cffa                      	 rjmp check_zero           ;if push button no longer released restart loop
00001b c000                      	 rjmp reset                ;calls loop to reset & clear the display
                                 	
                                 	reset: 
00001c e000                      	ldi r16, 0x00        ;clear a register
00001d b90d                      	out VPORTD_OUT, r16  ;clears the display
00001e 9891                          cbi VPORTE_IN , 1    ;sets flip flop output to 0 
00001f 9a90                      	sbi VPORTE_IN , 0    ;sets clear to 0 
000020 cfe6                      	rjmp main_loop       ;return to main_loop
                                 
                                        var_delay: 
                                 		outer_loop:
000021 e61e                      		ldi r17, 110              ;loads r17 with 110
                                 		inner_loop: 
000022 951a                      		dec r17                  ;decreases r17
000023 f7f1                      		brne inner_loop         ;branchs to start of inner_loop if not equal
000024 950a                      		dec r16                 ;decreases 16
000025 f7d9                      		brne outer_loop          ;branchs to outer_loop if not equal
000026 9508                      		ret            ;ends subroutine 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   8 r17:   9 r18:   0 r19:   1 r20:   0 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   0 r31:   0 
Registers used: 3 out of 35 (8.6%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   2 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :   2 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   0 
jmp   :   0 ld    :   0 ldd   :   0 ldi   :   6 lds   :   0 lpm   :   0 
lsl   :   0 lsr   :   0 mov   :   1 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   6 
pop   :   0 push  :   0 rcall :   2 ret   :   1 reti  :   0 rjmp  :   9 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   2 sbic  :   2 
sbis  :   2 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 14 out of 114 (12.3%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00004e     78      0     78   49152   0.2%
[.dseg] 0x002800 0x002800      0      0      0    6144   0.0%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
